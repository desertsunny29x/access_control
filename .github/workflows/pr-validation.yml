name: PR Validation

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            const errors = [];

            // 1. Branch name validation
            const branch = pr.head.ref;
            if (!/^(fix|access)\/[a-z0-9/_-]+$/.test(branch)) {
              errors.push(`❌ Branch name "${branch}" must start with fix/ or access/ and contain only lowercase letters, numbers, /, or _`);
            }

            // 2. Title check
            if (!pr.title.startsWith("Access Control - ")) {
              errors.push(`❌ PR title must start with "Access Control - "`);
            }

            // 3 & 4. Body (comment) validation
            const body = pr.body || "";
            const hasServiceNow = /### ServiceNow:\s*\(\[#\w+\]\(http.*\)\)/.test(body);
            const hasJustification = /### Justification:/.test(body);

            if (!(hasServiceNow || hasJustification)) {
              errors.push(`❌ PR description must include either:\n- ### ServiceNow: ([#RequestNumber](URL))\n- OR ### Justification:`);
            }

            // 5. Labels check
            if (!pr.labels || pr.labels.length === 0) {
              errors.push(`❌ At least one label must be set`);
            }

            // 6. Assignees check
            if (!pr.assignees || pr.assignees.length === 0) {
              errors.push(`❌ At least one assignee must be set`);
            }

            // 7. Reviewer check
            const reviewers = pr.requested_reviewers || [];
            if (reviewers.length === 0) {
              errors.push(`❌ At least one reviewer must be requested`);
            }

            // Fail if errors
            if (errors.length > 0) {
              core.setFailed(errors.join("\n"));
            } else {
              core.notice("✅ All validations passed!");
            }
