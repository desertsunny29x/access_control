name: PR Validation

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const errors = [];

            // 1. Branch name validation
            const branch = pr.head.ref;
            if (!/^(fix|access)\/[a-z0-9/_-]+$/.test(branch)) {
              errors.push(`❌ Branch name \`${branch}\` must start with \`fix/\` or \`access/\` and contain only lowercase letters, numbers, /, or _`);
            }

            // 2. Title check (explicit)
            if (!/^Access Control - .+/.test(pr.title)) {
              errors.push(`❌ PR title must start with **"Access Control - "**`);
            }

            // 3. ServiceNow check
            const body = pr.body || "";
            const serviceNowRegex = /### ServiceNow:\s*\(\[([A-Za-z0-9]+)\]\((https?:\/\/[^\s)]+)\)\)/;
            const match = body.match(serviceNowRegex);
            if (!match) {
              errors.push(`❌ PR description must include a valid ServiceNow reference in this format:\n   \`### ServiceNow: ([ALPHANUMERIC](http[s]://url))\``);
            }

            // 4. Justification check
            const hasJustification = /### Justification:/.test(body);
            if (!hasJustification) {
              errors.push(`❌ PR description must include a **Justification** section:\n   \`### Justification:\``);
            }

            // 5. Labels check
            if (!pr.labels || pr.labels.length === 0) {
              errors.push(`❌ At least one **label** must be set`);
            }

            // 6. Assignees check
            if (!pr.assignees || pr.assignees.length === 0) {
              errors.push(`❌ At least one **assignee** must be set`);
            }

            // 7. Reviewer check
            const reviewers = pr.requested_reviewers || [];
            if (reviewers.length === 0) {
              errors.push(`❌ At least one **reviewer** must be requested`);
            }

            // Post result as PR comment
            const { owner, repo } = context.repo;
            const issue_number = pr.number;

            if (errors.length > 0) {
              const body = [
                "🚨 **PR Validation Failed**",
                "",
                ...errors.map(e => `- ${e}`)
              ].join("\n");

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });

              core.setFailed("PR validation failed. See comment for details.");
            } else {
              const body = "✅ All PR validations passed!";
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
            }
