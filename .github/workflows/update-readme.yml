name: Update README

on:
  pull_request:
    types:
      - closed

permissions:
  contents: write
  pull-requests: read

jobs:
  update-readme:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update README.md
        env:
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          python - <<'PY'
          import os, re, datetime, pathlib

          repo = os.environ["REPO"]
          pr_num = os.environ["PR_NUMBER"]
          pr_title = os.environ["PR_TITLE"]
          pr_author = os.environ["PR_AUTHOR"]
          today = datetime.datetime.utcnow().strftime("%Y-%m-%d")

          readme_path = pathlib.Path("README.md")

          # --- Collect macros (excluding utils) ---
          macro_files = []
          for root, dirs, files in os.walk("macros"):
              if "utils" in root.lower():
                  continue
              for f in files:
                  if f.lower().endswith((".sql", ".sql.jinja", ".jinja", ".py", ".macro", ".yml", ".yaml")):
                      f_lower = f.lower()
                      if "byod" in f_lower:
                          desc = "Creates roles for BYOD (Bring Your Own Data) access."
                      elif "database" in f_lower:
                          desc = "Sets up database-level roles for access control."
                      elif "raw" in f_lower:
                          desc = "Defines roles for raw data sources."
                      elif "sensitive" in f_lower and "masking" in f_lower:
                          desc = "Manages sensitive data roles with masking policies."
                      elif "sensitive" in f_lower:
                          desc = "Manages sensitive data access roles."
                      elif "masking" in f_lower:
                          desc = "Applies masking policies for sensitive data."
                      else:
                          desc = "Reusable dbt macro for access control."

                      macro_files.append((f, desc))

          # --- Build README content ---
          lines = []
          lines.append("# Access Control DBT Project")
          lines.append("")
          # ✅ Add PR Validation status badge directly under title
          lines.append("[![PR Validation](https://github.com/desertsunny29x/access_control/actions/workflows/pr-validation.yml/badge.svg)](https://github.com/desertsunny29x/access_control/actions/workflows/pr-validation.yml)")
          lines.append("")
          lines.append("This repository contains a dbt project focused on **Access Control**. It provides reusable macros and models to manage, validate, and enforce access control logic within your data platform.")
          lines.append("")
          lines.append("## Macros")
          lines.append("Here are the main macros available in the `macros` folder (excluding any in `utils`):")
          lines.append("")
          lines.append("| Macro | What it does |")
          lines.append("|-------|---------------|")
          for name, desc in sorted(macro_files):
              lines.append(f"| `{name}` | {desc} |")
          lines.append("")
          lines.append("## Latest Build & Changes")
          lines.append(f"- 📅 Last updated: **{today}**")
          lines.append(f"- 📝 Latest merged PR: **{pr_title}** (PR [#{pr_num}](https://github.com/{repo}/pull/{pr_num})) by @{pr_author}")
          lines.append("- 📖 `CHANGELOG.md` is auto-updated whenever a PR is merged, keeping track of changes per day.")
          lines.append("- 🛠️ dbt macros are designed to be reusable and efficient, reducing boilerplate in your models.")
          lines.append("")
          lines.append("## How to Use")
          lines.append("1. Review the macros above to understand available functionality in simple terms.")
          lines.append("2. Import macros in your dbt models using `{{ macro_name() }}` syntax.")
          lines.append("3. Check the `CHANGELOG.md` file for the latest merged PRs and updates.")
          lines.append("")

          new_content = "\n".join(lines)

          if not readme_path.exists() or readme_path.read_text(encoding="utf-8") != new_content:
              readme_path.write_text(new_content, encoding="utf-8")
              print("README.md updated")
          else:
              print("README.md already up to date")
          PY

      - name: Commit and push changes
        run: |
          git add README.md || true
          if git diff --cached --quiet; then
            echo "No README changes to commit"
          else
            git commit -m "docs: update README with macros and latest PR info (#${{ github.event.pull_request.number }})"
            git push origin HEAD
          fi
