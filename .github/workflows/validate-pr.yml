name: Validate Pull Request Standards

on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Validate PR and comment results
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const errors = [];

            // 1. Title check
            if (!pr.title.startsWith('Access Control - ')) {
              errors.push('❌ **Title** must start with `Access Control - `');
            }

            // 2. Branch name check
            const branchName = pr.head.ref;
            const validBranchRegex = /^[a-z0-9/_]+$/;
            if (!branchName.startsWith('fix/') && !branchName.startsWith('access/')) {
              errors.push('❌ **Branch name** must start with `fix/` or `access/`');
            } else if (!validBranchRegex.test(branchName)) {
              errors.push('❌ **Branch name** must contain only lowercase letters, numbers, `/`, or `_`');
            }

            // 3. Label check
            const hasLabel = pr.labels.some(label => label.name.toLowerCase() === 'access control');
            if (!hasLabel) {
              errors.push('❌ **Label** `access control` is missing');
            }

            // 4. Assignee check
            if (pr.assignees.length === 0) {
              errors.push('❌ **Assignee** is not set. Please set it once the PR is ready for review.');
            }

            // 5. Comment format check (split into two validations)
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            let hasServiceNow = false;
            let hasJustification = false;

            const serviceNowRegex = /### ServiceNow:\s*\(

\[\s*#?\d+\s*\]

\(https?:\/\/[^\s)]+\)\)/;

            comments.data.forEach(comment => {
              if (serviceNowRegex.test(comment.body)) {
                hasServiceNow = true;
              }
              if (comment.body.includes('### Justification:')) {
                hasJustification = true;
              }
            });

            if (!hasServiceNow) {
              errors.push('❌ **Comment** must include `### ServiceNow: ([PR number](URL))` on the same line');
            }
            if (!hasJustification) {
              errors.push('❌ **Comment** must include `### Justification:` followed by explanation');
            }

            // 6. Post result
            const previousComment = comments.data.find(comment =>
              comment.body.includes('### 🚨 Pull Request Validation Failed') ||
              comment.body.includes('✅ All validation checks passed')
            );

            if (errors.length > 0) {
              const body = `### 🚨 Pull Request Validation Failed\nThe following issues were found:\n\n${errors.map(e => `- ${e}`).join('\n')}\n\nPlease fix these before merging.`;

              if (previousComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: previousComment.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body
                });
              }

              core.setFailed('Validation failed. See PR comments for details.');
            } else {
              if (previousComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: previousComment.id,
                  body: '✅ All validation checks passed. This pull request is compliant and ready for review.'
                });
              }
            }
